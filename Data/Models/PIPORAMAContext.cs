// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TP_ProgramaciónII_PIPORAMA.Data.Models;

public partial class PIPORAMAContext : DbContext
{
    public PIPORAMAContext(DbContextOptions<PIPORAMAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Butaca> Butacas { get; set; }

    public virtual DbSet<Categoria> Categorias { get; set; }

    public virtual DbSet<Clasificacion> Clasificacions { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Combo> Combos { get; set; }

    public virtual DbSet<Condicione> Condiciones { get; set; }

    public virtual DbSet<Consumible> Consumibles { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<DetallesCombo> DetallesCombos { get; set; }

    public virtual DbSet<DetallesFactura> DetallesFacturas { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<Entrada> Entradas { get; set; }

    public virtual DbSet<EstadoPelicula> EstadoPeliculas { get; set; }

    public virtual DbSet<EstadosCompra> EstadosCompras { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<FormaCompra> FormaCompras { get; set; }

    public virtual DbSet<Formato> Formatos { get; set; }

    public virtual DbSet<Funcione> Funciones { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Idioma> Idiomas { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<MediosPago> MediosPagos { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<Promocione> Promociones { get; set; }

    public virtual DbSet<PromocionesCondicione> PromocionesCondiciones { get; set; }

    public virtual DbSet<PromocionesEntrada> PromocionesEntradas { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<SalaButaca> SalaButacas { get; set; }

    public virtual DbSet<TiposCliente> TiposClientes { get; set; }

    public virtual DbSet<TiposContacto> TiposContactos { get; set; }

    public virtual DbSet<TiposPromocion> TiposPromocions { get; set; }

    public virtual DbSet<TiposProyeccion> TiposProyeccions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio);

            entity.ToTable("barrios");

            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Butaca>(entity =>
        {
            entity.HasKey(e => e.IdButaca);

            entity.ToTable("butacas");

            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.Activa).HasColumnName("activa");
            entity.Property(e => e.FilaButaca)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("fila_butaca");
            entity.Property(e => e.NumButaca).HasColumnName("num_butaca");
        });

        modelBuilder.Entity<Categoria>(entity =>
        {
            entity.HasKey(e => e.IdCategoria);

            entity.ToTable("categorias");

            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.Categoria1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria");
        });

        modelBuilder.Entity<Clasificacion>(entity =>
        {
            entity.HasKey(e => e.IdClasificacion);

            entity.ToTable("clasificacion");

            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.Clasificacion1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("clasificacion");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente);

            entity.ToTable("clientes");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.ApeCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ape_cliente");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdContacto).HasColumnName("id_contacto");
            entity.Property(e => e.IdTipoCliente).HasColumnName("id_tipo_cliente");
            entity.Property(e => e.NomCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nom_cliente");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_clientes_barrio");

            entity.HasOne(d => d.IdContactoNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdContacto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_clientes_contacto");

            entity.HasOne(d => d.IdTipoClienteNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdTipoCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_clientes_tipo");
        });

        modelBuilder.Entity<Combo>(entity =>
        {
            entity.HasKey(e => e.IdCombo);

            entity.ToTable("combos");

            entity.Property(e => e.IdCombo).HasColumnName("id_combo");
            entity.Property(e => e.NomCombo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("nom_combo");
        });

        modelBuilder.Entity<Condicione>(entity =>
        {
            entity.HasKey(e => e.IdCondicion);

            entity.ToTable("condiciones");

            entity.Property(e => e.IdCondicion).HasColumnName("id_condicion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Consumible>(entity =>
        {
            entity.HasKey(e => e.IdConsumible);

            entity.ToTable("consumibles");

            entity.Property(e => e.IdConsumible).HasColumnName("id_consumible");
            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.IdMarca).HasColumnName("id_marca");
            entity.Property(e => e.NomConsumible)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nom_consumible");
            entity.Property(e => e.PreUnitario).HasColumnName("pre_unitario");

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.Consumibles)
                .HasForeignKey(d => d.IdCategoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_consumibles_categoria");

            entity.HasOne(d => d.IdMarcaNavigation).WithMany(p => p.Consumibles)
                .HasForeignKey(d => d.IdMarca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_consumibles_marca");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.IdContacto);

            entity.ToTable("contactos");

            entity.Property(e => e.IdContacto).HasColumnName("id_contacto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");

            entity.HasOne(d => d.IdTipoContactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdTipoContacto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_contactos_tipo");
        });

        modelBuilder.Entity<DetallesCombo>(entity =>
        {
            entity.HasKey(e => e.IdDetalle);

            entity.ToTable("detalles_combo");

            entity.Property(e => e.IdDetalle).HasColumnName("id_detalle");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.IdCombo).HasColumnName("id_combo");
            entity.Property(e => e.IdConsumible).HasColumnName("id_consumible");
            entity.Property(e => e.PreUnitario).HasColumnName("pre_unitario");

            entity.HasOne(d => d.IdComboNavigation).WithMany(p => p.DetallesCombos)
                .HasForeignKey(d => d.IdCombo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalles_combo_combo");

            entity.HasOne(d => d.IdConsumibleNavigation).WithMany(p => p.DetallesCombos)
                .HasForeignKey(d => d.IdConsumible)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalles_combo_consumible");
        });

        modelBuilder.Entity<DetallesFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetalle);

            entity.ToTable("detalles_factura");

            entity.Property(e => e.IdDetalle).HasColumnName("id_detalle");
            entity.Property(e => e.IdCombo).HasColumnName("id_combo");
            entity.Property(e => e.IdConsumible).HasColumnName("id_consumible");
            entity.Property(e => e.IdEntrada).HasColumnName("id_entrada");
            entity.Property(e => e.IdFactura).HasColumnName("id_factura");
            entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");
            entity.Property(e => e.Precio).HasColumnName("precio");

            entity.HasOne(d => d.IdComboNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdCombo)
                .HasConstraintName("FK_detalles_factura_combo");

            entity.HasOne(d => d.IdConsumibleNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdConsumible)
                .HasConstraintName("FK_detalles_factura_consumible");

            entity.HasOne(d => d.IdEntradaNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdEntrada)
                .HasConstraintName("FK_detalles_factura_entrada");

            entity.HasOne(d => d.IdFacturaNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalles_factura_factura");

            entity.HasOne(d => d.IdPromocionNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdPromocion)
                .HasConstraintName("FK_detalles_factura_promocion");
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.IdEmpleado);

            entity.ToTable("empleados");

            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");
            entity.Property(e => e.ApeEmpleado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ape_empleado");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdContacto).HasColumnName("id_contacto");
            entity.Property(e => e.NomEmpleado)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nom_empleado");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_empleados_barrio");

            entity.HasOne(d => d.IdContactoNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdContacto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_empleados_contacto");
        });

        modelBuilder.Entity<Entrada>(entity =>
        {
            entity.HasKey(e => e.IdEntrada);

            entity.ToTable("entradas");

            entity.Property(e => e.IdEntrada).HasColumnName("id_entrada");
            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");

            entity.HasOne(d => d.IdButacaNavigation).WithMany(p => p.Entrada)
                .HasForeignKey(d => d.IdButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_entradas_butaca");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.Entrada)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_entradas_funcion");
        });

        modelBuilder.Entity<EstadoPelicula>(entity =>
        {
            entity.HasKey(e => e.IdEstadoPeli);

            entity.ToTable("estado_pelicula");

            entity.Property(e => e.IdEstadoPeli).HasColumnName("id_estado_peli");
            entity.Property(e => e.EstadoPelicula1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("estado_pelicula");
        });

        modelBuilder.Entity<EstadosCompra>(entity =>
        {
            entity.HasKey(e => e.IdEstadoCompra);

            entity.ToTable("estados_compra");

            entity.Property(e => e.IdEstadoCompra).HasColumnName("id_estado_compra");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.IdFactura);

            entity.ToTable("facturas");

            entity.Property(e => e.IdFactura).HasColumnName("id_factura");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");
            entity.Property(e => e.IdEstadoCompra).HasColumnName("id_estado_compra");
            entity.Property(e => e.IdFormaCompra).HasColumnName("id_forma_compra");
            entity.Property(e => e.IdMedioPago).HasColumnName("id_medio_pago");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_facturas_cliente");

            entity.HasOne(d => d.IdEmpleadoNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdEmpleado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_facturas_empleado");

            entity.HasOne(d => d.IdEstadoCompraNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdEstadoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_facturas_estado_compra");

            entity.HasOne(d => d.IdFormaCompraNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdFormaCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_facturas_forma_compra");

            entity.HasOne(d => d.IdMedioPagoNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdMedioPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_facturas_medio_pago");
        });

        modelBuilder.Entity<FormaCompra>(entity =>
        {
            entity.HasKey(e => e.IdFormaCompra);

            entity.ToTable("forma_compra");

            entity.Property(e => e.IdFormaCompra).HasColumnName("id_forma_compra");
            entity.Property(e => e.FormaCompra1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("forma_compra");
        });

        modelBuilder.Entity<Formato>(entity =>
        {
            entity.HasKey(e => e.IdFormato);

            entity.ToTable("formatos");

            entity.Property(e => e.IdFormato).HasColumnName("id_formato");
            entity.Property(e => e.Formato1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("formato");
        });

        modelBuilder.Entity<Funcione>(entity =>
        {
            entity.HasKey(e => e.IdFuncion);

            entity.ToTable("funciones");

            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.Horario)
                .HasColumnType("datetime")
                .HasColumnName("horario");
            entity.Property(e => e.IdFormato).HasColumnName("id_formato");
            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.IdTipoProyeccion).HasColumnName("id_tipo_proyeccion");

            entity.HasOne(d => d.IdFormatoNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdFormato)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_formato");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdIdioma)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_idioma");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_pelicula");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_sala");

            entity.HasOne(d => d.IdTipoProyeccionNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdTipoProyeccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_tipo_proyeccion");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero);

            entity.ToTable("generos");

            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Genero1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("genero");
        });

        modelBuilder.Entity<Idioma>(entity =>
        {
            entity.HasKey(e => e.IdIdioma);

            entity.ToTable("idiomas");

            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Idioma1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("idioma");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.IdMarca);

            entity.ToTable("marcas");

            entity.Property(e => e.IdMarca).HasColumnName("id_marca");
            entity.Property(e => e.Marca1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("marca");
        });

        modelBuilder.Entity<MediosPago>(entity =>
        {
            entity.HasKey(e => e.IdMedioPago);

            entity.ToTable("medios_pago");

            entity.Property(e => e.IdMedioPago).HasColumnName("id_medio_pago");
            entity.Property(e => e.MedioPago)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("medio_pago");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula);

            entity.ToTable("peliculas");

            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.IdEstadoPeli).HasColumnName("id_estado_peli");
            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.NomPelicula)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nom_pelicula");

            entity.HasOne(d => d.IdClasificacionNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdClasificacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_clasificacion");

            entity.HasOne(d => d.IdEstadoPeliNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdEstadoPeli)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_estado");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdGenero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_genero");
        });

        modelBuilder.Entity<Promocione>(entity =>
        {
            entity.HasKey(e => e.IdPromocion);

            entity.ToTable("promociones");

            entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdTipoPromo).HasColumnName("id_tipo_promo");
            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("valor_descuento");
            entity.Property(e => e.VigenciaDesde).HasColumnName("vigencia_desde");
            entity.Property(e => e.VigenciaHasta).HasColumnName("vigencia_hasta");

            entity.HasOne(d => d.IdTipoPromoNavigation).WithMany(p => p.Promociones)
                .HasForeignKey(d => d.IdTipoPromo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_promociones_tipo");
        });

        modelBuilder.Entity<PromocionesCondicione>(entity =>
        {
            entity.HasKey(e => e.IdPromoCond);

            entity.ToTable("promociones_condiciones");

            entity.Property(e => e.IdPromoCond).HasColumnName("id_promo_cond");
            entity.Property(e => e.IdCondicion).HasColumnName("id_condicion");
            entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

            entity.HasOne(d => d.IdCondicionNavigation).WithMany(p => p.PromocionesCondiciones)
                .HasForeignKey(d => d.IdCondicion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_promociones_condiciones_condicion");

            entity.HasOne(d => d.IdPromocionNavigation).WithMany(p => p.PromocionesCondiciones)
                .HasForeignKey(d => d.IdPromocion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_promociones_condiciones_promocion");
        });

        modelBuilder.Entity<PromocionesEntrada>(entity =>
        {
            entity.HasKey(e => e.IdPromoEntrada);

            entity.ToTable("promociones_entradas");

            entity.Property(e => e.IdPromoEntrada).HasColumnName("id_promo_entrada");
            entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");
            entity.Property(e => e.IdTipoProyeccion).HasColumnName("id_tipo_proyeccion");

            entity.HasOne(d => d.IdPromocionNavigation).WithMany(p => p.PromocionesEntrada)
                .HasForeignKey(d => d.IdPromocion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_promociones_entradas_promocion");

            entity.HasOne(d => d.IdTipoProyeccionNavigation).WithMany(p => p.PromocionesEntrada)
                .HasForeignKey(d => d.IdTipoProyeccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_promociones_entradas_tipo_proyeccion");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.IdSala);

            entity.ToTable("salas");

            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.CantButacas).HasColumnName("cant_butacas");
            entity.Property(e => e.NomSala)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nom_sala");
        });

        modelBuilder.Entity<SalaButaca>(entity =>
        {
            entity.HasKey(e => e.IdSalaButacas);

            entity.ToTable("sala_butacas");

            entity.Property(e => e.IdSalaButacas).HasColumnName("id_sala_butacas");
            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");

            entity.HasOne(d => d.IdButacaNavigation).WithMany(p => p.SalaButacas)
                .HasForeignKey(d => d.IdButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sala_butacas_butaca");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.SalaButacas)
                .HasForeignKey(d => d.IdSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sala_butacas_sala");
        });

        modelBuilder.Entity<TiposCliente>(entity =>
        {
            entity.HasKey(e => e.IdTipoCliente);

            entity.ToTable("tipos_cliente");

            entity.Property(e => e.IdTipoCliente).HasColumnName("id_tipo_cliente");
            entity.Property(e => e.TipoCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tipo_cliente");
        });

        modelBuilder.Entity<TiposContacto>(entity =>
        {
            entity.HasKey(e => e.IdTipoContacto);

            entity.ToTable("tipos_contacto");

            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<TiposPromocion>(entity =>
        {
            entity.HasKey(e => e.IdTipoPromo);

            entity.ToTable("tipos_promocion");

            entity.Property(e => e.IdTipoPromo).HasColumnName("id_tipo_promo");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposProyeccion>(entity =>
        {
            entity.HasKey(e => e.IdTipoProyeccion);

            entity.ToTable("tipos_proyeccion");

            entity.Property(e => e.IdTipoProyeccion).HasColumnName("id_tipo_proyeccion");
            entity.Property(e => e.TipoProyeccion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo_proyeccion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}